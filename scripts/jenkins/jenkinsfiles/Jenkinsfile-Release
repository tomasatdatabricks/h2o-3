def NODE_LABEL = 'master'

def pipelineContext = null
def result = 'FAILURE'

try {
    ansiColor('xterm') {
        timestamps {

            node(NODE_LABEL) {
                def insideDocker = null

                env.BUILT_ON_NODE = env.NODE_NAME

                env.BRANCH_NAME = env.BRANCH_NAME.replaceAll('/', '_')
                env.BUILD_NUMBER_DIR = currentBuild.number
                env.DATA_DIR = "/home/0xdiag"

                env.BUILD_LOG_FILE = "${env.BUILD_NUMBER_DIR}/log.txt"

                env.GRADLE_OPTS = "-Xmx4g -XX:MaxPermSize=512m"

                env.PYTHON_VERSION = '2.7'
                env.R_VERSION = '3.4.1'

                sh 'printenv'

                final String CHECKOUT_STAGE_NAME = 'Checkout'
                stage(CHECKOUT_STAGE_NAME) {

                    def scmEnv = null
                    dir(env.BUILD_NUMBER_DIR) {
                        deleteDir()
                        retry(5) {
                            timeout(1) {
                                scmEnv = checkout scm
                            }
                        }

                        env.THIS_BUILD_GIT_HASH_LONG = sh(script: 'git rev-parse --verify HEAD', returnStdout: true).trim()
                        env.THIS_BUILD_GIT_HASH_SHORT = sh(script: 'git describe --always', returnStdout: true).trim()
                    }

                    insideDocker = load("${env.BUILD_NUMBER_DIR}/scripts/jenkins/groovy/insideDocker.groovy")

                    def pipelineContextFactory = load("${env.BUILD_NUMBER_DIR}/scripts/jenkins/groovy/pipelineContext.groovy")
                    pipelineContext = pipelineContextFactory(env.BUILD_NUMBER_DIR, 'MODE_RELEASE', scmEnv, true)
                    pipelineContext.getBuildSummary().addStageSummary(this, CHECKOUT_STAGE_NAME, env.BUILD_NUMBER_DIR)

                    setReleaseJobProperties(pipelineContext)

                    pipelineContext.getBuildSummary().addDetailsSection(this)
                    final String version = sh(script: "cd ${env.BUILD_NUMBER_DIR} && cat gradle.properties | grep -Eo 'version=[0-9\\.]+' | grep -Eo '[0-9\\.]+'", returnStdout: true).trim()
                    String releaseContent = """
                        <ul>
                            <li><strong>Version:</strong> ${version}.${currentBuild.number}</li>
                            <li><strong>Node:</strong> ${env.NODE_NAME}</li>
                            <li><strong>Test Release:</strong> ${params.TEST_RELEASE}</li>
                            <li><strong>Nexus Upload:</strong> ${params.UPLOAD_NEXUS}</li>
                            <li><strong>PyPI Upload:</strong> ${params.UPLOAD_PYPI}</li>
                            <li><strong>Conda Upload:</strong> ${params.UPLOAD_CONDA}</li>
                            <li><strong>S3 Root:</strong> ${env.S3_ROOT}</li>
                        </ul>
                    """
                    pipelineContext.getBuildSummary().addSection(this, 'release', 'Release', releaseContent)

                    pipelineContext.getBuildSummary().setStageDetails(this, CHECKOUT_STAGE_NAME, env.NODE_NAME, env.WORKSPACE)
                    pipelineContext.getBuildSummary().markStageSuccessful(this, CHECKOUT_STAGE_NAME)
                }

                final String BUILD_STAGE_NAME = 'Build'
                stage(BUILD_STAGE_NAME) {
                    try {
                        pipelineContext.getBuildSummary().addStageSummary(this, BUILD_STAGE_NAME, env.BUILD_NUMBER_DIR)
                        pipelineContext.getBuildSummary().setStageDetails(this, BUILD_STAGE_NAME, env.NODE_NAME, env.WORKSPACE)
                        insideDocker([], pipelineContext.getBuildConfig().DEFAULT_IMAGE, pipelineContext.getBuildConfig().DOCKER_REGISTRY, 2, 'HOURS') {
                            withCredentials([file(credentialsId: 'release-gradle.properties', variable: 'GRADLE_PROPERTIES_PATH'), file(credentialsId: 'release-secret-key-ring-file', variable: 'RING_FILE_PATH')]) {
                                printReleaseConfiguration(pipelineContext)
                                sh """
                                # Log commands.
                                set -x
                                # Stop on error.
                                set -e
    
                                export BUILD_HADOOP=true
                                export JAVA_HOME=/usr/lib/jvm/java-8-oracle
                                echo "Activating Python ${env.PYTHON_VERSION}"
                                . /envs/h2o_env_python${env.PYTHON_VERSION}/bin/activate
                                echo "Activating R ${env.R_VERSION}"
                                activate_R_${env.R_VERSION}
    
                                mkdir -p ${env.BUILD_NUMBER_DIR}
                                cd ${env.BUILD_NUMBER_DIR}
    
                                # Log some stuff for debug purposes.
                                date
                                pwd
                                env
                                echo \$PATH
                                which java
                                java -version
                                du -h
    
                                # Update the build number.
                                mkdir -p ci
                                echo "BUILD_NUMBER=${currentBuild.number}" > gradle/buildnumber.properties
                                echo "BUILD_BRANCH_NAME=${env.BRANCH_NAME}" > gradle/git.properties
                                echo "BUILD_HASH=${env.THIS_BUILD_GIT_HASH_LONG}" >> gradle/git.properties
                                echo "BUILD_HASH_SHORT=${env.THIS_BUILD_GIT_HASH_SHORT}" >> gradle/git.properties
    
                                # Log some git stuff for debug purposes.
                                echo
                                echo GIT INFO
                                echo
                                git branch | grep '*' | sed 's/* //'
                                git log -1 --format="%H"
                                git describe --always --dirty
                                git status
    
                                # Do the build.
                                if [ -n "${env.DATA_DIR}" ]; then
                                    rm -f -r smalldata
                                    ln -s "${env.DATA_DIR}/smalldata"
                                    rm -f -r bigdata
                                    ln -s "${env.DATA_DIR}/bigdata"
                                else
                                    ./gradlew syncSmalldata
                                fi
                                if [ \$DO_RELEASE ]; then
                                    echo 'Copy gradle properties and modify gradle.properties'
                                    cp ${GRADLE_PROPERTIES_PATH} \$GRADLE_USER_HOME/gradle.properties
                                    chmod +w \$GRADLE_USER_HOME/gradle.properties
                                    echo "signing.secretKeyRingFile=${RING_FILE_PATH}" >> \$GRADLE_USER_HOME/gradle.properties
                                    chmod -w \$GRADLE_USER_HOME/gradle.properties
                                fi
                                ./gradlew build -x test
                                ./gradlew buildH2oDevDist
                            """
                            }
                        }
                        pipelineContext.getBuildSummary().markStageSuccessful(this, BUILD_STAGE_NAME)
                    } catch (Exception e) {
                        pipelineContext.getBuildSummary().markStageFailed(this, BUILD_STAGE_NAME)
                        throw e
                    }
                }

                env.PROJECT_VERSION = sh(script: "cd ${env.BUILD_NUMBER_DIR} && cat target/project_version", returnStdout: true).trim()
                env.SHA256_HASH = sh(script: "cd ${env.BUILD_NUMBER_DIR} && sha256sum target/h2o-*${currentBuild.number}.zip", returnStdout: true).trim()

                final String TAG_STAGE_NAME = 'Create Git Tag'
                stage(TAG_STAGE_NAME) {
                    try {
                        pipelineContext.getBuildSummary().addStageSummary(this, TAG_STAGE_NAME, env.BUILD_NUMBER_DIR)
                        pipelineContext.getBuildSummary().setStageDetails(this, TAG_STAGE_NAME, env.NODE_NAME, env.WORKSPACE)
//                        sh """
//                            cd ${env.BUILD_NUMBER_DIR}
//                            git tag -a jenkins-${env.BRANCH_NAME}-${currentBuild.number} -m "Jenkins build branch_name ${env.BRANCH_NAME} build_number ${env.PROJECT_VERSION}"
//                            git push --tags
//                        """
                        pipelineContext.getBuildSummary().markStageSuccessful(this, TAG_STAGE_NAME)
                    } catch (Exception e) {
                        pipelineContext.getBuildSummary().markStageFailed(this, TAG_STAGE_NAME)
                        throw e
                    }
                }

                def PUBLISH_STAGE_NAME = 'Publish to S3'
                stage(PUBLISH_STAGE_NAME) {
                    try {
                        pipelineContext.getBuildSummary().addStageSummary(this, PUBLISH_STAGE_NAME, env.BUILD_NUMBER_DIR)
                        pipelineContext.getBuildSummary().setStageDetails(this, PUBLISH_STAGE_NAME, env.NODE_NAME, env.WORKSPACE)
                        insideDocker([], pipelineContext.getBuildConfig().DEFAULT_IMAGE, pipelineContext.getBuildConfig().DOCKER_REGISTRY, 2, 'HOURS') {
                            sh """
                                cd ${env.BUILD_NUMBER_DIR}

                                # Publish the output to S3.
                                s3cmd --rexclude='target/maven' --acl-public sync target/ ${env.S3_ROOT}/${env.BRANCH_NAME}/${currentBuild.number}/

                                # This is really awful.  This old version of s3cmd does not set Content-Encoding metadata in S3.
                                # The newer version of s3cmd sets the Content-Encoding to UTF-8 and gradle fails.
                                # Alternately, we could strip off the Content-Encoding metadata tag for every file underneath maven.

                                # Puts latest R pacakge of h2o-3 into latest_R dir on s3
                                s3cmd del ${env.S3_ROOT}/latest_stable_R/h2o_*.tar.gz
                                s3cmd --acl-public -r put target/R/ ${env.S3_ROOT}/latest_stable_R/

                                # Puts latest Py pacakge of h2o-3 into latest_Py dir on s3
                                s3cmd del ${env.S3_ROOT}/latest_stable_Py/h2o-*.tar.gz
                                s3cmd --acl-public -r put target/Python/ ${env.S3_ROOT}/latest_stable_Py/

                                s3cmd --acl-public sync target/maven/ ${env.S3_ROOT}/${env.BRANCH_NAME}/${currentBuild.number}/maven/
                                s3cmd --acl-public put target/sha256.txt ${env.S3_ROOT}/${env.BRANCH_NAME}/${currentBuild.number}/sha256.txt

                                echo EXPLICITLY SET MIME TYPES AS NEEDED
                                list_of_html_files=`find target -name '*.html' | sed 's/target\\///g'`
                                echo \${list_of_html_files}
                                for f in \${list_of_html_files}
                                do
                                    s3cmd --acl-public --mime-type text/html put target/\${f} ${env.S3_ROOT}/${env.BRANCH_NAME}/${currentBuild.number}/\${f}
                                done

                                list_of_js_files=`find target -name '*.js' | sed 's/target\\///g'`
                                echo \${list_of_js_files}
                                for f in \${list_of_js_files}
                                do
                                    s3cmd --acl-public --mime-type text/javascript put target/\${f} ${env.S3_ROOT}/${env.BRANCH_NAME}/${currentBuild.number}/\${f}
                                done

                                list_of_css_files=`find target -name '*.css' | sed 's/target\\///g'`
                                echo \${list_of_css_files}
                                for f in \${list_of_css_files}
                                do
                                    s3cmd --acl-public --mime-type text/css put target/\${f} ${env.S3_ROOT}/${env.BRANCH_NAME}/${currentBuild.number}/\${f}
                                done

                                echo UPDATE LATEST POINTER
                                tmpdir=./buildh2odev.tmp
                                mkdir -p \${tmpdir}
                                echo ${currentBuild.number} > \${tmpdir}/latest
                                echo "<head>" > \${tmpdir}/latest.html
                                echo "<meta http-equiv=\\"refresh\\" content=\\"0; url=${currentBuild.number}/index.html\\" />" >> \${tmpdir}/latest.html
                                echo "</head>" >> \${tmpdir}/latest.html

                                s3cmd --acl-public put \${tmpdir}/latest ${env.S3_ROOT}/${env.BRANCH_NAME}/latest
                                s3cmd --acl-public put \${tmpdir}/latest.html ${env.S3_ROOT}/${env.BRANCH_NAME}/latest.html
                                s3cmd --acl-public put \${tmpdir}/latest.html ${env.S3_ROOT}/${env.BRANCH_NAME}/index.html
                            """
                        }
                        pipelineContext.getBuildSummary().markStageSuccessful(this, PUBLISH_STAGE_NAME)
                    } catch (Exception e) {
                        pipelineContext.getBuildSummary().markStageFailed(this, PUBLISH_STAGE_NAME)
                        throw e
                    }
                }

                if (params.TEST_RELEASE || env.BRANCH_NAME.startsWith(pipelineContext.getBuildConfig().RELEASE_BRANCH_PREFIX)) {
                    prepareH2OVersionCheckScript(env.PROJECT_VERSION)

                    if (params.UPLOAD_PYPI) {
                        // create and upload PyPI package
                        def UPLOAD_TO_PYPI_STAGE_NAME = 'Upload to PyPI'
                        stage(UPLOAD_TO_PYPI_STAGE_NAME) {
                            try {
                                pipelineContext.getBuildSummary().addStageSummary(this, UPLOAD_TO_PYPI_STAGE_NAME, env.BUILD_NUMBER_DIR)
                                pipelineContext.getBuildSummary().setStageDetails(this, UPLOAD_TO_PYPI_STAGE_NAME, env.NODE_NAME, env.WORKSPACE)
                                withCredentials([usernamePassword(credentialsId: 'pypi-credentials', usernameVariable: 'TWINE_USERNAME', passwordVariable: 'TWINE_PASSWORD')]) {
                                    insideDocker([], pipelineContext.getBuildConfig().DEFAULT_IMAGE, pipelineContext.getBuildConfig().DOCKER_REGISTRY, 2, 'HOURS') {
                                        sh """
                                            echo "Activating Python ${env.PYTHON_VERSION}"
                                            . /envs/h2o_env_python${env.PYTHON_VERSION}/bin/activate
                                
                                            cd ${env.BUILD_NUMBER_DIR}/h2o-py
                                            python setup.py sdist
                                            
                                            if [ "\$TEST_RELEASE" = true ]; then
                                                echo '****** WARNING! Upload to PyPI suppressed ******'
                                            else
                                                echo '****** Upload to PyPI ******'
                                                twine upload dist/h2o-${env.PROJECT_VERSION}.tar.gz
                                            fi
                                        """
                                    }
                                }
                                pipelineContext.getBuildSummary().markStageSuccessful(this, UPLOAD_TO_PYPI_STAGE_NAME)
                            } catch (Exception e) {
                                pipelineContext.getBuildSummary().markStageFailed(this, UPLOAD_TO_PYPI_STAGE_NAME)
                                throw e
                            }
                        }
                        // check that pip package for each Python version reports correct H2O version
                        if (!params.TEST_RELEASE) {
                            for (pyVersion in pipelineContext.getBuildConfig().PYTHON_VERSIONS) {
                                def checkPyPIStageName = "Check Py${pyVersion} PyPI Package"
                                stage(checkPyPIStageName) {
                                    try {
                                        pipelineContext.getBuildSummary().addStageSummary(this, checkPyPIStageName, env.BUILD_NUMBER_DIR)
                                        pipelineContext.getBuildSummary().setStageDetails(this, checkPyPIStageName, env.NODE_NAME, env.WORKSPACE)
                                        insideDocker(["PYTHON_VERSION=${pyVersion}"], pipelineContext.getBuildConfig().DEFAULT_IMAGE, pipelineContext.getBuildConfig().DOCKER_REGISTRY, 2, 'HOURS') {
                                            echo "Check PyPI package for Python ${pyVersion}"
                                            sh """
                                            export JAVA_HOME=/usr/lib/jvm/java-8-oracle
                                            echo "Activating Python ${env.PYTHON_VERSION}"
                                            . /envs/h2o_env_python${env.PYTHON_VERSION}/bin/activate
    
                                            pip install h2o
                                            python --version
                                            python h2o_test.py
                                        """
                                        }
                                        pipelineContext.getBuildSummary().markStageSuccessful(this, checkPyPIStageName)
                                    } catch (Exception e) {
                                        pipelineContext.getBuildSummary().markStageFailed(this, checkPyPIStageName)
                                        throw e
                                    }
                                }
                            }
                        } else {
                            echo 'Marked as TEST_RELEASE, don\'t check uploaded PyPI packages'
                        }
                    }

                    if (params.UPLOAD_CONDA) {
                        // build for all Python versions
                        for (pyVersion in pipelineContext.getBuildConfig().PYTHON_VERSIONS) {
                            def uploadToCondaStageName = "Upload Py${pyVersion} to Conda"
                            stage(uploadToCondaStageName) {
                                withCredentials([usernamePassword(credentialsId: 'anaconda-credentials', usernameVariable: 'ANACONDA_USERNAME', passwordVariable: 'ANACONDA_PASSWORD')]) {
                                    pipelineContext.getBuildSummary().addStageSummary(this, uploadToCondaStageName, env.BUILD_NUMBER_DIR)
                                    pipelineContext.getBuildSummary().setStageDetails(this, uploadToCondaStageName, env.NODE_NAME, env.WORKSPACE)
                                    try {
                                        insideDocker([], pipelineContext.getBuildConfig().DEFAULT_IMAGE, pipelineContext.getBuildConfig().DOCKER_REGISTRY, 2, 'HOURS') {
                                            sh """
                                                cd ${env.BUILD_NUMBER_DIR}/h2o-py/conda
                                                # Create conda package for current platform
                                                conda config --append channels conda-forge
                                                conda build h2o --output-folder "." --no-anaconda-upload --py ${pyVersion}
                                                # Get name of the package
                                                CONDA_PKG_CURRENT_ARCH_PATH=\$(conda build h2o --py ${pyVersion} --output-folder "." --output | tail -1)
                                                PKG_NAME=\$(basename \$CONDA_PKG_CURRENT_ARCH_PATH)
                                                # Convert conda package for all other platforms
                                                conda convert \$CONDA_PKG_CURRENT_ARCH_PATH -p all
                                                
                                                if [ "\$TEST_RELEASE" = true ]; then
                                                    echo '****** WARNING! Upload to Conda suppressed ******'
                                                else
                                                    echo '****** Upload to Conda ******'
                                                    # Right now packages for all platforms are in the current directory
                                                    # upload all distribution packages
                                                    anaconda login --username ${ANACONDA_USERNAME} --password ${ANACONDA_PASSWORD}
                                                    anaconda upload osx-64/\${PKG_NAME}
                                                    anaconda upload linux-32/\${PKG_NAME}
                                                    anaconda upload linux-64/\${PKG_NAME}
                                                    anaconda upload win-32/\${PKG_NAME}
                                                    anaconda upload win-64/\${PKG_NAME}
                                                fi 
                                            """
                                        }
                                        pipelineContext.getBuildSummary().markStageSuccessful(this, uploadToCondaStageName)
                                    } catch (Exception e) {
                                        pipelineContext.getBuildSummary().markStageFailed(this, uploadToCondaStageName)
                                        throw e
                                    }
                                }
                            }
                        }
                        // check that Conda package for each Python version reports correct H2O version
                        if (!params.TEST_RELEASE) {
                            for (pyVersion in pipelineContext.getBuildConfig().PYTHON_VERSIONS) {
                                def checkCondaStageName = "Check Py${pyVersion} Conda Package"
                                stage(checkCondaStageName) {
                                    pipelineContext.getBuildSummary().addStageSummary(this, checkCondaStageName, env.BUILD_NUMBER_DIR)
                                    pipelineContext.getBuildSummary().setStageDetails(this, checkCondaStageName, env.NODE_NAME, env.WORKSPACE)
                                    try {
                                        insideDocker([], pipelineContext.getBuildConfig().DEFAULT_IMAGE, pipelineContext.getBuildConfig().DOCKER_REGISTRY, 2, 'HOURS') {
                                            echo "Check Conda package for Python ${pyVersion}"
                                            sh "conda create -y -n py${pyVersion} python=${pyVersion} anaconda"
                                            sh """
                                                bash -c \"\"\"
                                                    source activate py${pyVersion}
                                                    conda config --append channels conda-forge
        
                                                    conda install -y -c h2oai h2o
                                                    python --version
                                                    python h2o_test.py
                                                \"\"\"
                                            """
                                        }
                                        pipelineContext.getBuildSummary().markStageSuccessful(this, checkCondaStageName)
                                    } catch (Exception e) {
                                        pipelineContext.getBuildSummary().markStageFailed(this, checkCondaStageName)
                                        throw e
                                    }
                                }
                            }
                        } else {
                            echo 'Marked as TEST_RELEASE, don\'t check uploaded Conda packages'
                        }
                    }
                }
            }
        }
    }
    result = 'SUCCESS'
} finally {
    if (pipelineContext != null) {
        // FIXME set correct recipients
        pipelineContext.getEmailer().sendEmail(this, result, pipelineContext.getBuildSummary().getSummaryHTML(this), ['michalr@h2o.ai'])
    }
}

/**
 * Sets the required properties. For all jobs the concurrent builds are disabled and four parameters are defined.
 * For nightly master builds a schedule and build discarder is added. For release jobs the
 * DO_RELEASE env var is set, if UPLOAD_NEXUS is set.
 * @param pipelineContext PipelineContext object for this build
 */
private setReleaseJobProperties(final pipelineContext) {

    def TEST_RELEASE_BUCKET = 's3://test.0xdata.com/test-release/h2o'
    def RELEASE_BUCKET = 's3://h2o-release/h2o'

    def jobProperties = [
        disableConcurrentBuilds(),
        parameters([
            booleanParam(defaultValue: false, description: "If set don't upload to PyPI and Conda, just build the packages if required; also push to ${TEST_RELEASE_BUCKET} instead of ${RELEASE_BUCKET}", name: 'TEST_RELEASE'),
            booleanParam(defaultValue: false, description: 'If set, publish to Nexus', name: 'UPLOAD_NEXUS'),
            booleanParam(defaultValue: false, description: 'If set build PyPI package. Also if building rel- branch, publish to PyPI', name: 'UPLOAD_PYPI'),
            booleanParam(defaultValue: false, description: 'If set build Conda package. Also if building rel- branch, publish to Conda', name: 'UPLOAD_CONDA')
        ])
    ]

    if (params.TEST_RELEASE || !env.BRANCH_NAME.startsWith(pipelineContext.getBuildConfig().RELEASE_BRANCH_PREFIX)) {
        env.S3_ROOT = "${TEST_RELEASE_BUCKET}/${env.BRANCH_NAME}"
    } else {
        env.S3_ROOT = RELEASE_BUCKET
    }
    echo "Release will be pushed to ${env.S3_ROOT}"

    if (env.BRANCH_NAME == 'master') {
        // in case of master branch enable the periodical builds and buildDiscarder
        env.NIGHTLY_BUILD = true
        jobProperties += pipelineTriggers(
                [cron('30 23 * * *')]
        )
        jobProperties += buildDiscarder(
                logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '25')
        )

    } else if (params.TEST_RELEASE || env.BRANCH_NAME.startsWith(pipelineContext.getBuildConfig().RELEASE_BRANCH_PREFIX)) {
        // in case of release branch and enabled upload to Maven, we have to set DO_RELEASE
        if (params.UPLOAD_NEXUS) {
            env.DO_RELEASE = true
        }
    }
    properties(jobProperties)
}

private printReleaseConfiguration(final pipelineContext) {
    echo """
=======================================
Configuration:
---------------------------------------
    SHA:                | ${env.GIT_SHA}
    Branch:             | ${env.BRANCH_NAME}
    Docker Image:       | ${pipelineContext.getBuildConfig().DEFAULT_IMAGE}
    Test Release:       | ${params.TEST_RELEASE}
    S3 Bucket:          | ${env.S3_ROOT}
    Publish to Nexus:   | ${params.UPLOAD_NEXUS}
    Publish to PyPI:    | ${params.UPLOAD_PYPI}
    Publish to Conda:   | ${params.UPLOAD_CONDA}
=======================================
"""
}

/**
 * Creates Python script which checks if h2o module is of expected version. Script is saved in $(pwd)/h2o_test.py
 * @param projectVersion expected h2o module version, like 3.16.0.2
 */
private prepareH2OVersionCheckScript(final String projectVersion) {
    sh """
echo '
import h2o
actual_version = h2o.__version__
expected_version = "${projectVersion}"
assert actual_version == expected_version, "Version should be %s but was %s" % (expected_version, actual_version)
' > h2o_test.py
"""
}

/**
 * @param result result of the build
 * @param helpers emailContentHelpers script
 * @return list of relevant recipients for summary email of this build
 */
private getRelevantRecipients(result, helpers) {
    def RELEASE_NIGHTLY_ALWAYS_RECIPIENTS = ['michalr@h2o.ai']
    def RELEASE_NIGHTLY_FAILURE_RECIPIENTS = ['michalk@h2o.ai', 'anmol@h2o.ai'] + RELEASE_NIGHTLY_ALWAYS_RECIPIENTS
    def RELEASE_ALWAYS_RECIPIENTS = ['michalk@h2o.ai', 'anmol@h2o.ai', 'michalr@h2o.ai']
    def RELEASE_FAILURE_RECIPIENTS = [] + RELEASE_ALWAYS_RECIPIENTS

    if (result.toLowerCase() == helpers.RESULT_SUCCESS) {
        if (env.NIGHTLY_BUILD) {
            return RELEASE_NIGHTLY_ALWAYS_RECIPIENTS
        }
        return RELEASE_ALWAYS_RECIPIENTS
    }
    if (env.NIGHTLY_BUILD) {
        return RELEASE_NIGHTLY_FAILURE_RECIPIENTS
    }
    return RELEASE_FAILURE_RECIPIENTS
}
