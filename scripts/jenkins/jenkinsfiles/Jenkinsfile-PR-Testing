@Library('test-shared-library') _

def DEFAULT_NODE_LABEL = 'docker && !mr-0xc8'

def defineTestStages = null
def buildConfig = null
def scmEnv = null

withCustomCommitStates(scm, 'h2o-ops-personal-auth-token', 'H2O-3 Pipeline') {
  ansiColor('xterm') {
    timestamps {

      cancelPreviousBuilds()

      // Checkout and build H2O-3, create test packages and archive the scripts;
      // run this on H2O-3 usable docker node, because we don't want to overload
      // master
      node(DEFAULT_NODE_LABEL) {

        stage('Prepare and Build') {
          dir('h2o-3') {
            // clear the folder
            deleteDir()
            // checkout H2O-3
            retry(3) {
              timeout(time: 1, unit: 'MINUTES') {
                echo "###### Checkout H2O-3 ######"
                scmEnv = checkout scm
              }
            }
          }

          def setBuildDesc = load('h2o-3/scripts/jenkins/groovy/setBuildDescription.groovy')
          setBuildDesc()

          def prepareH2O3 = load('h2o-3/scripts/jenkins/groovy/prepareH2O3.groovy')
          buildConfig = prepareH2O3(scmEnv, 'MODE_PR_TESTING', false)

          def setJobProperties = load('h2o-3/scripts/jenkins/groovy/setJobProperties.groovy')
          setJobProperties(buildConfig)

          // Load the defineTestStages script
          defineTestStages = load('h2o-3/scripts/jenkins/groovy/defineTestStages.groovy')
        }
      }
      defineTestStages(buildConfig)
    }
  }
}

def cancelPreviousBuilds() {
  echo "###### Cancelling all previous builds ######"
  def hi = Hudson.instance
  def pname = env.JOB_NAME.split('/')[0]

  hi.getItem(pname).getItem(env.JOB_BASE_NAME).getBuilds().each{ build ->
    def exec = build.getExecutor()

    if (build.number != currentBuild.number && exec != null) {
      exec.doStop()
      println("Aborted previous running build #${build.number}")
    }
  }
}