@Library('test-shared-library') _

def DEFAULT_NODE_LABEL = 'docker && !mr-0xc8'

def defineTestStages = null
def pipelineContext = null
def pipelineEmailContent = null
def emailContentHelpers = null
def sendEmail = null
def result = 'FAILURE'
def scmEnv = null

try {
  ansiColor('xterm') {
    timestamps {

      node(DEFAULT_NODE_LABEL) {
        stage('Prepare and Build') {
          dir('h2o-3') {
            // clear the folder
            deleteDir()
            // checkout H2O-3
            retry(3) {
              timeout(time: 1, unit: 'MINUTES') {
                echo "###### Checkout H2O-3 ######"
                scmEnv = checkout scm
              }
            }
          }

          pipelineEmailContent = load('h2o-3/scripts/jenkins/groovy/pipelineEmailContent.groovy')
          sendEmail = load('h2o-3/scripts/jenkins/groovy/sendEmail.groovy')
          emailContentHelpers = load('h2o-3/scripts/jenkins/groovy/emailContentHelpers.groovy')

          def setBuildDesc = load('h2o-3/scripts/jenkins/groovy/setBuildDescription.groovy')
          setBuildDesc()

          def prepareH2O3 = load('h2o-3/scripts/jenkins/groovy/prepareH2O3.groovy')
          pipelineContext = prepareH2O3(scmEnv, 'MODE_MASTER', true)
          pipelineContext.setDefaultOverrideRerun(true)

          def setJobProperties = load('h2o-3/scripts/jenkins/groovy/setJobProperties.groovy')
          setJobProperties(pipelineContext)

          // Load the defineTestStages script
          defineTestStages = load('h2o-3/scripts/jenkins/groovy/defineTestStages.groovy')
        }
      }
      defineTestStages(pipelineContext)
      result = 'SUCCESS'
    }
  }
} finally {
  if (pipelineEmailContent != null && sendEmail != null && emailContentHelpers != null) {
    def emailBody = pipelineEmailContent(result, emailContentHelpers)
    sendEmail(result, emailBody, emailContentHelpers.getRelevantPipelineRecipients(result))
  }
}